/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sofi.customers.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A party record is sent to Kafka when changes are made to Party entity. When any party field changes,
    the entire Party is published. Some fields of this schema will be empty when there are no active
    records in the DB.Sometimes fields like militaryInfo, personInfo, partyEthnicity, and fraudInfo
    (These entities that can have onlyONE current instance at a time) will be null when there are no
    active records in the DB. */
@org.apache.avro.specific.AvroGenerated
public class Party extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8476174560459218481L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Party\",\"namespace\":\"com.sofi.customers.schemas\",\"doc\":\"A party record is sent to Kafka when changes are made to Party entity. When any party field changes,\\n    the entire Party is published. Some fields of this schema will be empty when there are no active\\n    records in the DB.Sometimes fields like militaryInfo, personInfo, partyEthnicity, and fraudInfo\\n    (These entities that can have onlyONE current instance at a time) will be null when there are no\\n    active records in the DB.\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"partyType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's type (CUSTOMER, EMPLOYEE, etc)\",\"default\":null},{\"name\":\"active\",\"type\":\"boolean\",\"doc\":\"Party's status like active (true) or inactive (false)\"},{\"name\":\"addresses\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Address\",\"doc\":\"A party can have many addresses, but can only have one address per addressType\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of Address (HOME, WORK, etc)\",\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The status of the Address like Present\"},{\"name\":\"duration\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Duration says in years how long Party has been staying at given address (ONE, TWO, etc)\"},{\"name\":\"lineOne\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The address line one\"},{\"name\":\"lineTwo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The address line two\"},{\"name\":\"lineThree\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The address line three\"},{\"name\":\"unitNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The unit number\"},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The city\"},{\"name\":\"localeName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Full state (or province) name i.e Montana\"},{\"name\":\"localeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"State (or province) name with 2-char format i.e MT\"},{\"name\":\"postalCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The postal code\"},{\"name\":\"countryCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"2-char country code like US\"}],\"version\":1}}],\"doc\":\"A party can have many addresses, but can only have one address per\\n        AddressType. It will be empty, when there are no active records.\",\"default\":null},{\"name\":\"emails\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Email\",\"doc\":\"A party can have many Emails, but only one per type.\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"emailAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's email address\",\"default\":null},{\"name\":\"emailType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The type of email (PRIMARY, SECONDARY, etc)\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have multiple Emails, but only one per type (EmailType: PRIMARY,\\n        SECONDARY). It will be empty, when there are no active records.\",\"default\":null},{\"name\":\"names\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PartyName\",\"doc\":\"Party names, a Party can have two type names (LEGAL, COMMON).\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"firstName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's first name\"},{\"name\":\"middleName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional Party's middle name\",\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's last name\",\"default\":null},{\"name\":\"businessName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional Party's business name\",\"default\":null},{\"name\":\"namePrefix\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional Party's name prefix i.e MR, MS, etc\",\"default\":null},{\"name\":\"nameSuffix\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Optional Party's name suffix i.e JR, SR, etc\",\"default\":null},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's name type (LEGAL, COMMON)\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have two names, NameType.COMMON and NameType.LEGAL. It will\\n        be empty, when there are no active records.\",\"default\":null},{\"name\":\"militaryInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MilitaryInfo\",\"doc\":\"The party military info. Party can only have one active militaryInfo\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"yearsMilitaryExperience\",\"type\":[\"null\",\"int\"],\"doc\":\"Party's military years of experience\"},{\"name\":\"veteranStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's veteran status\"},{\"name\":\"armedServiceStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's army service status\"}],\"version\":1}],\"doc\":\"A party can only have one active MilitaryInfo. If there is no military info,\\n        then It will be null.\",\"default\":null},{\"name\":\"personInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PersonInfo\",\"doc\":\"PersonInfo is party basic information\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"gender\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's gender (M, F)\",\"default\":null},{\"name\":\"maritalStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's marital status (MARRIED, SEPARATED, etc)\",\"default\":null},{\"name\":\"housingStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's housing status (RENT, OWN, etc)\",\"default\":null},{\"name\":\"deceased\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Party's deceased status\"},{\"name\":\"noCollege\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Party's noCollege status\"},{\"name\":\"yearsOfExperience\",\"type\":[\"null\",\"int\"],\"doc\":\"Party's years of professional experience\"},{\"name\":\"profession\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's profession\"},{\"name\":\"citizenship\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's citizenship type (CITIZEN, RESIDENT, etc)\"},{\"name\":\"countryOfResidence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's country of residence\"},{\"name\":\"countryOfCitizenship\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's country of citizenship like US\"},{\"name\":\"medicalResident\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Party's medical resident status\"},{\"name\":\"appliedForGreencard\",\"type\":[\"null\",\"boolean\"],\"doc\":\"This field indicates whether Party is applied for green card or not\"}],\"version\":1}],\"doc\":\"A party can only have one active PersonInfo at a time. If there is no\\n        person info, then It will be null.\",\"default\":null},{\"name\":\"phones\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Phone\",\"doc\":\"A Party can have multiple Phones, but only one per type\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"countryPrefix\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The country prefix\"},{\"name\":\"areaCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Phone Area code\"},{\"name\":\"extension\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Phone extension\"},{\"name\":\"phoneNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Phone number\",\"default\":null},{\"name\":\"phoneType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Phone type (HOME, WORK)\",\"def","ault\":null},{\"name\":\"smsAccepted\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Phone SMS acceptance status\"},{\"name\":\"designation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Phone designation like PRIMARY\"}],\"version\":1}}],\"doc\":\"A Party can have multiple Phones, but only one per type. It will be empty\\n        when there are no phones.\",\"default\":null},{\"name\":\"partyEthnicity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PartyEthnicity\",\"doc\":\"Party's ethnicity. Only one ethnicity per Party\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"ethnicity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's ethnicity like HISPANIC, OTHER\",\"default\":null}],\"version\":1}],\"doc\":\"A party can only have one active ethnicity. It will be null when there is\\n        no active ethnicity of the Party.\",\"default\":null},{\"name\":\"servicingInfos\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ServicingInfo\",\"doc\":\"Servicing system information\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The Servicing system type like MOHELA, SOFI_PL, etc\",\"default\":null},{\"name\":\"contactable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Servicing system contactable status\"}],\"version\":1}}],\"doc\":\"A party can only have one active servicingInfos per ServicingType.\\n        If there is no servicing info, then it will be empty.\",\"default\":null},{\"name\":\"partyRaces\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PartyRace\",\"doc\":\"Party race\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"race\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Party's race like INDIAN, ASIAN, etc\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have multiple races. It will be empty on no active records.\",\"default\":null},{\"name\":\"restrictions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Restriction\",\"doc\":\"Restrictions on Party, a Party can have many Restrictions, but one per RestrictionType.\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"active\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Restriction status\"},{\"name\":\"bypassRoleCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Bypass role code (ADMIN, USER, etc)\",\"default\":null},{\"name\":\"restrictionType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Restriction type (SUPERVISOR, OTHER, etc)\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have many restrictions, but one per RestrictionType. It will\\n        be empty on no active records.\",\"default\":null},{\"name\":\"educations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Education\",\"doc\":\"A party can have multiple educations.\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"programId\",\"type\":[\"null\",\"long\"],\"doc\":\"Program id\"},{\"name\":\"graduated\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Graduated in this program or course\"},{\"name\":\"ncsVerificationId\",\"type\":[\"null\",\"long\"],\"doc\":\"NCS verification Id\"},{\"name\":\"separationDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Separation date (YYYY-MM-DD)\"},{\"name\":\"universityId\",\"type\":[\"null\",\"long\"],\"doc\":\"University id where Party still studying or graduated\"}],\"version\":1}}],\"doc\":\"A party can have multiple educations. It will be empty, if there are no\\n        active records.\",\"default\":null},{\"name\":\"identifiers\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Identifier\",\"doc\":\"Party's identifier\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Identifier value (string)\",\"default\":null},{\"name\":\"columnValueType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Column value type like VARCHAR\",\"default\":null},{\"name\":\"typeCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Identifier type code (NII,NVI, etc)\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have many identifiers but only one active per IdentifierType.\\n        It will be empty, if there are no identifiers.\",\"default\":null},{\"name\":\"consents\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Consent\",\"doc\":\"Party's can have many consents, but only one (active) Consent for each agreement type\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"consentDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Consent date (YYYY-MM-DD)\"},{\"name\":\"expirationDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Consent expiration date (YYYY-MM-DD)\"},{\"name\":\"optOutDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Consent opt out date (YYYY-MM-DD)\"},{\"name\":\"consentAgreement\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ConsentAgreement\",\"doc\":\"Consent agreement\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Agreement type like COMMUNICATIONS, PRIVACY, etc\",\"default\":null},{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Agreement text i.e Communications Policy, Disclosure Policy\",\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"int\"],\"doc\":\"Version indicates how many times the agreement has been revised, specifically,\\n        the number of revisions equals version number minus one.\",\"default\":null}],\"version\":1}],\"doc\":\"Consent agreement\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have many consents, but only one (active) Consent for each\\n        agreement_type. It will be empty, if there are no active records.\",\"default\":null},{\"name\":\"fraudInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FraudInfo\",\"doc\":\"A party can have only one active fraud_info.\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"fraudulentAccount\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Status of account whether it is fraud account or not\"},{\"name\":\"verifiedActualPerson\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Says, whether the Party is verified or not\"},{\"name\":\"identityTheftDetected\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Identity theft detection status\"},{\"name\":\"confirmedFraudType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Fraud type (ID, INCOME, etc)\"}],\"version\":1}],\"doc\":\"A party can only have one active fraudInfo. If there are no active fraudInfo,\\n        It will be empty.\",\"default\":null},{\"name\":\"contactPrefs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ContactPref\",\"doc\":\"ContactPref is for contact preference. It is a carryover from v1 customer service.\\n    It is not related to CommunicationPreference in v2 customers service.\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"contactModePref\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Contact mode pref (NONE is the only option)\",\"default\":null},{\"name\":\"contactType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Contact type like (COMM, MARKET)\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have many contactPrefs. If there are no active,\\n        It will be empty.\",\"default\":null},{\"name\":\"preferences\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Preference\",\"doc\":\"A party preference used to apply to Address, Email, and Phone\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Preference type like MARKETING_EMAIL, BUSINESS_SMS\",\"default\":null},{\"name\":\"preference\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Preference is OPT_IN or OPT_OUT\",\"default\":null},{\"name\":\"contactAfterTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Mil","itary time format (e.g 2100 is 09:00 PM)\",\"default\":null},{\"name\":\"contactBeforeTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Military time format (e.g 0900 is 09:00 AM)\",\"default\":null},{\"name\":\"timezone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This time zone will be applied to contactAfterTime and contactBeforeTime\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have many preferences. It will be empty, if there are no\\n        active preference records.\",\"default\":null},{\"name\":\"compensationSources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CompensationSource\",\"doc\":\"Party's compensation source(Employment), a CompensationSource can have many Compensations\",\"fields\":[{\"name\":\"partyId\",\"type\":\"long\",\"doc\":\"Party's ID in the customers service\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Compensation source name like Job\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Compensation source type (EMPLOYEE, RETIREE)\",\"default\":null},{\"name\":\"businessStructureType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Business structure type\"},{\"name\":\"jobTitle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Job title like Software Engineer\"},{\"name\":\"supervisorName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Supervisor name\"},{\"name\":\"employeeType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employee type like FULL_TIME, PART_TIME, etc\",\"default\":null},{\"name\":\"typeOfBusiness\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employer business type like Services\"},{\"name\":\"employmentEndDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employment end date (YYYY-MM-DD)\"},{\"name\":\"employmentStartDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employment start date (YYYY-MM-DD)\"},{\"name\":\"contactPhone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employer contact number\"},{\"name\":\"employeeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employee id\"},{\"name\":\"employerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employer id\"},{\"name\":\"employerSource\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employer source like EFX\"},{\"name\":\"employerNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employer number\"},{\"name\":\"significantOwnership\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Significant ownership\"},{\"name\":\"wageIncome\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Wage income\"},{\"name\":\"hasOneYear1099\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Has one year 1099\"},{\"name\":\"compensations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Compensation\",\"doc\":\"Compensation(Income) has a CompensationType, and there can be at most one Compensation for\\n    each type in any given CompensationSource.\",\"fields\":[{\"name\":\"compensationSourceId\",\"type\":\"long\",\"doc\":\"CompensationSource Id\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Compensation type i.e SALARY, HOURLY, etc\",\"default\":null},{\"name\":\"frequency\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Frequency like ANNUAL, MONTHLY, etc\",\"default\":null},{\"name\":\"designation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A designation for a Compensation: VERIFIED or UNVERIFIED\",\"default\":null},{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Currency type (USD, CAD, etc)\",\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigDecimal\"}],\"doc\":\"Amount\",\"default\":null}],\"version\":1}}],\"doc\":\"CompensationSource can have many Compensations\",\"default\":null}],\"version\":1}}],\"doc\":\"A party can have multiple CompensationSources, including of the same type.\\n        It will be empty, if there are no active compensation sources.\",\"default\":null}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Party> ENCODER =
      new BinaryMessageEncoder<Party>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Party> DECODER =
      new BinaryMessageDecoder<Party>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Party> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Party> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Party>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Party to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Party from a ByteBuffer. */
  public static Party fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Party's ID in the customers service */
   private long partyId;
  /** Party's type (CUSTOMER, EMPLOYEE, etc) */
   private java.lang.String partyType;
  /** Party's status like active (true) or inactive (false) */
   private boolean active;
  /** A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records. */
   private java.util.List<com.sofi.customers.schemas.Address> addresses;
  /** A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records. */
   private java.util.List<com.sofi.customers.schemas.Email> emails;
  /** A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records. */
   private java.util.List<com.sofi.customers.schemas.PartyName> names;
  /** A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null. */
   private com.sofi.customers.schemas.MilitaryInfo militaryInfo;
  /** A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null. */
   private com.sofi.customers.schemas.PersonInfo personInfo;
  /** A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones. */
   private java.util.List<com.sofi.customers.schemas.Phone> phones;
  /** A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party. */
   private com.sofi.customers.schemas.PartyEthnicity partyEthnicity;
  /** A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty. */
   private java.util.List<com.sofi.customers.schemas.ServicingInfo> servicingInfos;
  /** A party can have multiple races. It will be empty on no active records. */
   private java.util.List<com.sofi.customers.schemas.PartyRace> partyRaces;
  /** A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records. */
   private java.util.List<com.sofi.customers.schemas.Restriction> restrictions;
  /** A party can have multiple educations. It will be empty, if there are no
        active records. */
   private java.util.List<com.sofi.customers.schemas.Education> educations;
  /** A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers. */
   private java.util.List<com.sofi.customers.schemas.Identifier> identifiers;
  /** A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records. */
   private java.util.List<com.sofi.customers.schemas.Consent> consents;
  /** A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty. */
   private com.sofi.customers.schemas.FraudInfo fraudInfo;
  /** A party can have many contactPrefs. If there are no active,
        It will be empty. */
   private java.util.List<com.sofi.customers.schemas.ContactPref> contactPrefs;
  /** A party can have many preferences. It will be empty, if there are no
        active preference records. */
   private java.util.List<com.sofi.customers.schemas.Preference> preferences;
  /** A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources. */
   private java.util.List<com.sofi.customers.schemas.CompensationSource> compensationSources;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Party() {}

  /**
   * All-args constructor.
   * @param partyId Party's ID in the customers service
   * @param partyType Party's type (CUSTOMER, EMPLOYEE, etc)
   * @param active Party's status like active (true) or inactive (false)
   * @param addresses A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records.
   * @param emails A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records.
   * @param names A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records.
   * @param militaryInfo A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
   * @param personInfo A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
   * @param phones A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones.
   * @param partyEthnicity A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
   * @param servicingInfos A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty.
   * @param partyRaces A party can have multiple races. It will be empty on no active records.
   * @param restrictions A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records.
   * @param educations A party can have multiple educations. It will be empty, if there are no
        active records.
   * @param identifiers A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers.
   * @param consents A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records.
   * @param fraudInfo A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
   * @param contactPrefs A party can have many contactPrefs. If there are no active,
        It will be empty.
   * @param preferences A party can have many preferences. It will be empty, if there are no
        active preference records.
   * @param compensationSources A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources.
   */
  public Party(java.lang.Long partyId, java.lang.String partyType, java.lang.Boolean active, java.util.List<com.sofi.customers.schemas.Address> addresses, java.util.List<com.sofi.customers.schemas.Email> emails, java.util.List<com.sofi.customers.schemas.PartyName> names, com.sofi.customers.schemas.MilitaryInfo militaryInfo, com.sofi.customers.schemas.PersonInfo personInfo, java.util.List<com.sofi.customers.schemas.Phone> phones, com.sofi.customers.schemas.PartyEthnicity partyEthnicity, java.util.List<com.sofi.customers.schemas.ServicingInfo> servicingInfos, java.util.List<com.sofi.customers.schemas.PartyRace> partyRaces, java.util.List<com.sofi.customers.schemas.Restriction> restrictions, java.util.List<com.sofi.customers.schemas.Education> educations, java.util.List<com.sofi.customers.schemas.Identifier> identifiers, java.util.List<com.sofi.customers.schemas.Consent> consents, com.sofi.customers.schemas.FraudInfo fraudInfo, java.util.List<com.sofi.customers.schemas.ContactPref> contactPrefs, java.util.List<com.sofi.customers.schemas.Preference> preferences, java.util.List<com.sofi.customers.schemas.CompensationSource> compensationSources) {
    this.partyId = partyId;
    this.partyType = partyType;
    this.active = active;
    this.addresses = addresses;
    this.emails = emails;
    this.names = names;
    this.militaryInfo = militaryInfo;
    this.personInfo = personInfo;
    this.phones = phones;
    this.partyEthnicity = partyEthnicity;
    this.servicingInfos = servicingInfos;
    this.partyRaces = partyRaces;
    this.restrictions = restrictions;
    this.educations = educations;
    this.identifiers = identifiers;
    this.consents = consents;
    this.fraudInfo = fraudInfo;
    this.contactPrefs = contactPrefs;
    this.preferences = preferences;
    this.compensationSources = compensationSources;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return partyId;
    case 1: return partyType;
    case 2: return active;
    case 3: return addresses;
    case 4: return emails;
    case 5: return names;
    case 6: return militaryInfo;
    case 7: return personInfo;
    case 8: return phones;
    case 9: return partyEthnicity;
    case 10: return servicingInfos;
    case 11: return partyRaces;
    case 12: return restrictions;
    case 13: return educations;
    case 14: return identifiers;
    case 15: return consents;
    case 16: return fraudInfo;
    case 17: return contactPrefs;
    case 18: return preferences;
    case 19: return compensationSources;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: partyId = (java.lang.Long)value$; break;
    case 1: partyType = (java.lang.String)value$; break;
    case 2: active = (java.lang.Boolean)value$; break;
    case 3: addresses = (java.util.List<com.sofi.customers.schemas.Address>)value$; break;
    case 4: emails = (java.util.List<com.sofi.customers.schemas.Email>)value$; break;
    case 5: names = (java.util.List<com.sofi.customers.schemas.PartyName>)value$; break;
    case 6: militaryInfo = (com.sofi.customers.schemas.MilitaryInfo)value$; break;
    case 7: personInfo = (com.sofi.customers.schemas.PersonInfo)value$; break;
    case 8: phones = (java.util.List<com.sofi.customers.schemas.Phone>)value$; break;
    case 9: partyEthnicity = (com.sofi.customers.schemas.PartyEthnicity)value$; break;
    case 10: servicingInfos = (java.util.List<com.sofi.customers.schemas.ServicingInfo>)value$; break;
    case 11: partyRaces = (java.util.List<com.sofi.customers.schemas.PartyRace>)value$; break;
    case 12: restrictions = (java.util.List<com.sofi.customers.schemas.Restriction>)value$; break;
    case 13: educations = (java.util.List<com.sofi.customers.schemas.Education>)value$; break;
    case 14: identifiers = (java.util.List<com.sofi.customers.schemas.Identifier>)value$; break;
    case 15: consents = (java.util.List<com.sofi.customers.schemas.Consent>)value$; break;
    case 16: fraudInfo = (com.sofi.customers.schemas.FraudInfo)value$; break;
    case 17: contactPrefs = (java.util.List<com.sofi.customers.schemas.ContactPref>)value$; break;
    case 18: preferences = (java.util.List<com.sofi.customers.schemas.Preference>)value$; break;
    case 19: compensationSources = (java.util.List<com.sofi.customers.schemas.CompensationSource>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'partyId' field.
   * @return Party's ID in the customers service
   */
  public java.lang.Long getPartyId() {
    return partyId;
  }

  /**
   * Sets the value of the 'partyId' field.
   * Party's ID in the customers service
   * @param value the value to set.
   */
  public void setPartyId(java.lang.Long value) {
    this.partyId = value;
  }

  /**
   * Gets the value of the 'partyType' field.
   * @return Party's type (CUSTOMER, EMPLOYEE, etc)
   */
  public java.lang.String getPartyType() {
    return partyType;
  }

  /**
   * Sets the value of the 'partyType' field.
   * Party's type (CUSTOMER, EMPLOYEE, etc)
   * @param value the value to set.
   */
  public void setPartyType(java.lang.String value) {
    this.partyType = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return Party's status like active (true) or inactive (false)
   */
  public java.lang.Boolean getActive() {
    return active;
  }

  /**
   * Sets the value of the 'active' field.
   * Party's status like active (true) or inactive (false)
   * @param value the value to set.
   */
  public void setActive(java.lang.Boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'addresses' field.
   * @return A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records.
   */
  public java.util.List<com.sofi.customers.schemas.Address> getAddresses() {
    return addresses;
  }

  /**
   * Sets the value of the 'addresses' field.
   * A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records.
   * @param value the value to set.
   */
  public void setAddresses(java.util.List<com.sofi.customers.schemas.Address> value) {
    this.addresses = value;
  }

  /**
   * Gets the value of the 'emails' field.
   * @return A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records.
   */
  public java.util.List<com.sofi.customers.schemas.Email> getEmails() {
    return emails;
  }

  /**
   * Sets the value of the 'emails' field.
   * A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records.
   * @param value the value to set.
   */
  public void setEmails(java.util.List<com.sofi.customers.schemas.Email> value) {
    this.emails = value;
  }

  /**
   * Gets the value of the 'names' field.
   * @return A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records.
   */
  public java.util.List<com.sofi.customers.schemas.PartyName> getNames() {
    return names;
  }

  /**
   * Sets the value of the 'names' field.
   * A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records.
   * @param value the value to set.
   */
  public void setNames(java.util.List<com.sofi.customers.schemas.PartyName> value) {
    this.names = value;
  }

  /**
   * Gets the value of the 'militaryInfo' field.
   * @return A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
   */
  public com.sofi.customers.schemas.MilitaryInfo getMilitaryInfo() {
    return militaryInfo;
  }

  /**
   * Sets the value of the 'militaryInfo' field.
   * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
   * @param value the value to set.
   */
  public void setMilitaryInfo(com.sofi.customers.schemas.MilitaryInfo value) {
    this.militaryInfo = value;
  }

  /**
   * Gets the value of the 'personInfo' field.
   * @return A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
   */
  public com.sofi.customers.schemas.PersonInfo getPersonInfo() {
    return personInfo;
  }

  /**
   * Sets the value of the 'personInfo' field.
   * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
   * @param value the value to set.
   */
  public void setPersonInfo(com.sofi.customers.schemas.PersonInfo value) {
    this.personInfo = value;
  }

  /**
   * Gets the value of the 'phones' field.
   * @return A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones.
   */
  public java.util.List<com.sofi.customers.schemas.Phone> getPhones() {
    return phones;
  }

  /**
   * Sets the value of the 'phones' field.
   * A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones.
   * @param value the value to set.
   */
  public void setPhones(java.util.List<com.sofi.customers.schemas.Phone> value) {
    this.phones = value;
  }

  /**
   * Gets the value of the 'partyEthnicity' field.
   * @return A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
   */
  public com.sofi.customers.schemas.PartyEthnicity getPartyEthnicity() {
    return partyEthnicity;
  }

  /**
   * Sets the value of the 'partyEthnicity' field.
   * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
   * @param value the value to set.
   */
  public void setPartyEthnicity(com.sofi.customers.schemas.PartyEthnicity value) {
    this.partyEthnicity = value;
  }

  /**
   * Gets the value of the 'servicingInfos' field.
   * @return A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty.
   */
  public java.util.List<com.sofi.customers.schemas.ServicingInfo> getServicingInfos() {
    return servicingInfos;
  }

  /**
   * Sets the value of the 'servicingInfos' field.
   * A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty.
   * @param value the value to set.
   */
  public void setServicingInfos(java.util.List<com.sofi.customers.schemas.ServicingInfo> value) {
    this.servicingInfos = value;
  }

  /**
   * Gets the value of the 'partyRaces' field.
   * @return A party can have multiple races. It will be empty on no active records.
   */
  public java.util.List<com.sofi.customers.schemas.PartyRace> getPartyRaces() {
    return partyRaces;
  }

  /**
   * Sets the value of the 'partyRaces' field.
   * A party can have multiple races. It will be empty on no active records.
   * @param value the value to set.
   */
  public void setPartyRaces(java.util.List<com.sofi.customers.schemas.PartyRace> value) {
    this.partyRaces = value;
  }

  /**
   * Gets the value of the 'restrictions' field.
   * @return A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records.
   */
  public java.util.List<com.sofi.customers.schemas.Restriction> getRestrictions() {
    return restrictions;
  }

  /**
   * Sets the value of the 'restrictions' field.
   * A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records.
   * @param value the value to set.
   */
  public void setRestrictions(java.util.List<com.sofi.customers.schemas.Restriction> value) {
    this.restrictions = value;
  }

  /**
   * Gets the value of the 'educations' field.
   * @return A party can have multiple educations. It will be empty, if there are no
        active records.
   */
  public java.util.List<com.sofi.customers.schemas.Education> getEducations() {
    return educations;
  }

  /**
   * Sets the value of the 'educations' field.
   * A party can have multiple educations. It will be empty, if there are no
        active records.
   * @param value the value to set.
   */
  public void setEducations(java.util.List<com.sofi.customers.schemas.Education> value) {
    this.educations = value;
  }

  /**
   * Gets the value of the 'identifiers' field.
   * @return A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers.
   */
  public java.util.List<com.sofi.customers.schemas.Identifier> getIdentifiers() {
    return identifiers;
  }

  /**
   * Sets the value of the 'identifiers' field.
   * A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers.
   * @param value the value to set.
   */
  public void setIdentifiers(java.util.List<com.sofi.customers.schemas.Identifier> value) {
    this.identifiers = value;
  }

  /**
   * Gets the value of the 'consents' field.
   * @return A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records.
   */
  public java.util.List<com.sofi.customers.schemas.Consent> getConsents() {
    return consents;
  }

  /**
   * Sets the value of the 'consents' field.
   * A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records.
   * @param value the value to set.
   */
  public void setConsents(java.util.List<com.sofi.customers.schemas.Consent> value) {
    this.consents = value;
  }

  /**
   * Gets the value of the 'fraudInfo' field.
   * @return A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
   */
  public com.sofi.customers.schemas.FraudInfo getFraudInfo() {
    return fraudInfo;
  }

  /**
   * Sets the value of the 'fraudInfo' field.
   * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
   * @param value the value to set.
   */
  public void setFraudInfo(com.sofi.customers.schemas.FraudInfo value) {
    this.fraudInfo = value;
  }

  /**
   * Gets the value of the 'contactPrefs' field.
   * @return A party can have many contactPrefs. If there are no active,
        It will be empty.
   */
  public java.util.List<com.sofi.customers.schemas.ContactPref> getContactPrefs() {
    return contactPrefs;
  }

  /**
   * Sets the value of the 'contactPrefs' field.
   * A party can have many contactPrefs. If there are no active,
        It will be empty.
   * @param value the value to set.
   */
  public void setContactPrefs(java.util.List<com.sofi.customers.schemas.ContactPref> value) {
    this.contactPrefs = value;
  }

  /**
   * Gets the value of the 'preferences' field.
   * @return A party can have many preferences. It will be empty, if there are no
        active preference records.
   */
  public java.util.List<com.sofi.customers.schemas.Preference> getPreferences() {
    return preferences;
  }

  /**
   * Sets the value of the 'preferences' field.
   * A party can have many preferences. It will be empty, if there are no
        active preference records.
   * @param value the value to set.
   */
  public void setPreferences(java.util.List<com.sofi.customers.schemas.Preference> value) {
    this.preferences = value;
  }

  /**
   * Gets the value of the 'compensationSources' field.
   * @return A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources.
   */
  public java.util.List<com.sofi.customers.schemas.CompensationSource> getCompensationSources() {
    return compensationSources;
  }

  /**
   * Sets the value of the 'compensationSources' field.
   * A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources.
   * @param value the value to set.
   */
  public void setCompensationSources(java.util.List<com.sofi.customers.schemas.CompensationSource> value) {
    this.compensationSources = value;
  }

  /**
   * Creates a new Party RecordBuilder.
   * @return A new Party RecordBuilder
   */
  public static com.sofi.customers.schemas.Party.Builder newBuilder() {
    return new com.sofi.customers.schemas.Party.Builder();
  }

  /**
   * Creates a new Party RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Party RecordBuilder
   */
  public static com.sofi.customers.schemas.Party.Builder newBuilder(com.sofi.customers.schemas.Party.Builder other) {
    return new com.sofi.customers.schemas.Party.Builder(other);
  }

  /**
   * Creates a new Party RecordBuilder by copying an existing Party instance.
   * @param other The existing instance to copy.
   * @return A new Party RecordBuilder
   */
  public static com.sofi.customers.schemas.Party.Builder newBuilder(com.sofi.customers.schemas.Party other) {
    return new com.sofi.customers.schemas.Party.Builder(other);
  }

  /**
   * RecordBuilder for Party instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Party>
    implements org.apache.avro.data.RecordBuilder<Party> {

    /** Party's ID in the customers service */
    private long partyId;
    /** Party's type (CUSTOMER, EMPLOYEE, etc) */
    private java.lang.String partyType;
    /** Party's status like active (true) or inactive (false) */
    private boolean active;
    /** A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records. */
    private java.util.List<com.sofi.customers.schemas.Address> addresses;
    /** A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records. */
    private java.util.List<com.sofi.customers.schemas.Email> emails;
    /** A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records. */
    private java.util.List<com.sofi.customers.schemas.PartyName> names;
    /** A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null. */
    private com.sofi.customers.schemas.MilitaryInfo militaryInfo;
    private com.sofi.customers.schemas.MilitaryInfo.Builder militaryInfoBuilder;
    /** A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null. */
    private com.sofi.customers.schemas.PersonInfo personInfo;
    private com.sofi.customers.schemas.PersonInfo.Builder personInfoBuilder;
    /** A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones. */
    private java.util.List<com.sofi.customers.schemas.Phone> phones;
    /** A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party. */
    private com.sofi.customers.schemas.PartyEthnicity partyEthnicity;
    private com.sofi.customers.schemas.PartyEthnicity.Builder partyEthnicityBuilder;
    /** A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty. */
    private java.util.List<com.sofi.customers.schemas.ServicingInfo> servicingInfos;
    /** A party can have multiple races. It will be empty on no active records. */
    private java.util.List<com.sofi.customers.schemas.PartyRace> partyRaces;
    /** A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records. */
    private java.util.List<com.sofi.customers.schemas.Restriction> restrictions;
    /** A party can have multiple educations. It will be empty, if there are no
        active records. */
    private java.util.List<com.sofi.customers.schemas.Education> educations;
    /** A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers. */
    private java.util.List<com.sofi.customers.schemas.Identifier> identifiers;
    /** A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records. */
    private java.util.List<com.sofi.customers.schemas.Consent> consents;
    /** A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty. */
    private com.sofi.customers.schemas.FraudInfo fraudInfo;
    private com.sofi.customers.schemas.FraudInfo.Builder fraudInfoBuilder;
    /** A party can have many contactPrefs. If there are no active,
        It will be empty. */
    private java.util.List<com.sofi.customers.schemas.ContactPref> contactPrefs;
    /** A party can have many preferences. It will be empty, if there are no
        active preference records. */
    private java.util.List<com.sofi.customers.schemas.Preference> preferences;
    /** A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources. */
    private java.util.List<com.sofi.customers.schemas.CompensationSource> compensationSources;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sofi.customers.schemas.Party.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.partyId)) {
        this.partyId = data().deepCopy(fields()[0].schema(), other.partyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.partyType)) {
        this.partyType = data().deepCopy(fields()[1].schema(), other.partyType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.active)) {
        this.active = data().deepCopy(fields()[2].schema(), other.active);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.addresses)) {
        this.addresses = data().deepCopy(fields()[3].schema(), other.addresses);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emails)) {
        this.emails = data().deepCopy(fields()[4].schema(), other.emails);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.names)) {
        this.names = data().deepCopy(fields()[5].schema(), other.names);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.militaryInfo)) {
        this.militaryInfo = data().deepCopy(fields()[6].schema(), other.militaryInfo);
        fieldSetFlags()[6] = true;
      }
      if (other.hasMilitaryInfoBuilder()) {
        this.militaryInfoBuilder = com.sofi.customers.schemas.MilitaryInfo.newBuilder(other.getMilitaryInfoBuilder());
      }
      if (isValidValue(fields()[7], other.personInfo)) {
        this.personInfo = data().deepCopy(fields()[7].schema(), other.personInfo);
        fieldSetFlags()[7] = true;
      }
      if (other.hasPersonInfoBuilder()) {
        this.personInfoBuilder = com.sofi.customers.schemas.PersonInfo.newBuilder(other.getPersonInfoBuilder());
      }
      if (isValidValue(fields()[8], other.phones)) {
        this.phones = data().deepCopy(fields()[8].schema(), other.phones);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.partyEthnicity)) {
        this.partyEthnicity = data().deepCopy(fields()[9].schema(), other.partyEthnicity);
        fieldSetFlags()[9] = true;
      }
      if (other.hasPartyEthnicityBuilder()) {
        this.partyEthnicityBuilder = com.sofi.customers.schemas.PartyEthnicity.newBuilder(other.getPartyEthnicityBuilder());
      }
      if (isValidValue(fields()[10], other.servicingInfos)) {
        this.servicingInfos = data().deepCopy(fields()[10].schema(), other.servicingInfos);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.partyRaces)) {
        this.partyRaces = data().deepCopy(fields()[11].schema(), other.partyRaces);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.restrictions)) {
        this.restrictions = data().deepCopy(fields()[12].schema(), other.restrictions);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.educations)) {
        this.educations = data().deepCopy(fields()[13].schema(), other.educations);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.identifiers)) {
        this.identifiers = data().deepCopy(fields()[14].schema(), other.identifiers);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.consents)) {
        this.consents = data().deepCopy(fields()[15].schema(), other.consents);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.fraudInfo)) {
        this.fraudInfo = data().deepCopy(fields()[16].schema(), other.fraudInfo);
        fieldSetFlags()[16] = true;
      }
      if (other.hasFraudInfoBuilder()) {
        this.fraudInfoBuilder = com.sofi.customers.schemas.FraudInfo.newBuilder(other.getFraudInfoBuilder());
      }
      if (isValidValue(fields()[17], other.contactPrefs)) {
        this.contactPrefs = data().deepCopy(fields()[17].schema(), other.contactPrefs);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.preferences)) {
        this.preferences = data().deepCopy(fields()[18].schema(), other.preferences);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.compensationSources)) {
        this.compensationSources = data().deepCopy(fields()[19].schema(), other.compensationSources);
        fieldSetFlags()[19] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Party instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sofi.customers.schemas.Party other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.partyId)) {
        this.partyId = data().deepCopy(fields()[0].schema(), other.partyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.partyType)) {
        this.partyType = data().deepCopy(fields()[1].schema(), other.partyType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.active)) {
        this.active = data().deepCopy(fields()[2].schema(), other.active);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.addresses)) {
        this.addresses = data().deepCopy(fields()[3].schema(), other.addresses);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emails)) {
        this.emails = data().deepCopy(fields()[4].schema(), other.emails);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.names)) {
        this.names = data().deepCopy(fields()[5].schema(), other.names);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.militaryInfo)) {
        this.militaryInfo = data().deepCopy(fields()[6].schema(), other.militaryInfo);
        fieldSetFlags()[6] = true;
      }
      this.militaryInfoBuilder = null;
      if (isValidValue(fields()[7], other.personInfo)) {
        this.personInfo = data().deepCopy(fields()[7].schema(), other.personInfo);
        fieldSetFlags()[7] = true;
      }
      this.personInfoBuilder = null;
      if (isValidValue(fields()[8], other.phones)) {
        this.phones = data().deepCopy(fields()[8].schema(), other.phones);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.partyEthnicity)) {
        this.partyEthnicity = data().deepCopy(fields()[9].schema(), other.partyEthnicity);
        fieldSetFlags()[9] = true;
      }
      this.partyEthnicityBuilder = null;
      if (isValidValue(fields()[10], other.servicingInfos)) {
        this.servicingInfos = data().deepCopy(fields()[10].schema(), other.servicingInfos);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.partyRaces)) {
        this.partyRaces = data().deepCopy(fields()[11].schema(), other.partyRaces);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.restrictions)) {
        this.restrictions = data().deepCopy(fields()[12].schema(), other.restrictions);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.educations)) {
        this.educations = data().deepCopy(fields()[13].schema(), other.educations);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.identifiers)) {
        this.identifiers = data().deepCopy(fields()[14].schema(), other.identifiers);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.consents)) {
        this.consents = data().deepCopy(fields()[15].schema(), other.consents);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.fraudInfo)) {
        this.fraudInfo = data().deepCopy(fields()[16].schema(), other.fraudInfo);
        fieldSetFlags()[16] = true;
      }
      this.fraudInfoBuilder = null;
      if (isValidValue(fields()[17], other.contactPrefs)) {
        this.contactPrefs = data().deepCopy(fields()[17].schema(), other.contactPrefs);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.preferences)) {
        this.preferences = data().deepCopy(fields()[18].schema(), other.preferences);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.compensationSources)) {
        this.compensationSources = data().deepCopy(fields()[19].schema(), other.compensationSources);
        fieldSetFlags()[19] = true;
      }
    }

    /**
      * Gets the value of the 'partyId' field.
      * Party's ID in the customers service
      * @return The value.
      */
    public java.lang.Long getPartyId() {
      return partyId;
    }

    /**
      * Sets the value of the 'partyId' field.
      * Party's ID in the customers service
      * @param value The value of 'partyId'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setPartyId(long value) {
      validate(fields()[0], value);
      this.partyId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'partyId' field has been set.
      * Party's ID in the customers service
      * @return True if the 'partyId' field has been set, false otherwise.
      */
    public boolean hasPartyId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'partyId' field.
      * Party's ID in the customers service
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearPartyId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'partyType' field.
      * Party's type (CUSTOMER, EMPLOYEE, etc)
      * @return The value.
      */
    public java.lang.String getPartyType() {
      return partyType;
    }

    /**
      * Sets the value of the 'partyType' field.
      * Party's type (CUSTOMER, EMPLOYEE, etc)
      * @param value The value of 'partyType'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setPartyType(java.lang.String value) {
      validate(fields()[1], value);
      this.partyType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'partyType' field has been set.
      * Party's type (CUSTOMER, EMPLOYEE, etc)
      * @return True if the 'partyType' field has been set, false otherwise.
      */
    public boolean hasPartyType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'partyType' field.
      * Party's type (CUSTOMER, EMPLOYEE, etc)
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearPartyType() {
      partyType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * Party's status like active (true) or inactive (false)
      * @return The value.
      */
    public java.lang.Boolean getActive() {
      return active;
    }

    /**
      * Sets the value of the 'active' field.
      * Party's status like active (true) or inactive (false)
      * @param value The value of 'active'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setActive(boolean value) {
      validate(fields()[2], value);
      this.active = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * Party's status like active (true) or inactive (false)
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'active' field.
      * Party's status like active (true) or inactive (false)
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearActive() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'addresses' field.
      * A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Address> getAddresses() {
      return addresses;
    }

    /**
      * Sets the value of the 'addresses' field.
      * A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records.
      * @param value The value of 'addresses'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setAddresses(java.util.List<com.sofi.customers.schemas.Address> value) {
      validate(fields()[3], value);
      this.addresses = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'addresses' field has been set.
      * A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records.
      * @return True if the 'addresses' field has been set, false otherwise.
      */
    public boolean hasAddresses() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'addresses' field.
      * A party can have many addresses, but can only have one address per
        AddressType. It will be empty, when there are no active records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearAddresses() {
      addresses = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'emails' field.
      * A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Email> getEmails() {
      return emails;
    }

    /**
      * Sets the value of the 'emails' field.
      * A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records.
      * @param value The value of 'emails'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setEmails(java.util.List<com.sofi.customers.schemas.Email> value) {
      validate(fields()[4], value);
      this.emails = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'emails' field has been set.
      * A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records.
      * @return True if the 'emails' field has been set, false otherwise.
      */
    public boolean hasEmails() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'emails' field.
      * A party can have multiple Emails, but only one per type (EmailType: PRIMARY,
        SECONDARY). It will be empty, when there are no active records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearEmails() {
      emails = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'names' field.
      * A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.PartyName> getNames() {
      return names;
    }

    /**
      * Sets the value of the 'names' field.
      * A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records.
      * @param value The value of 'names'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setNames(java.util.List<com.sofi.customers.schemas.PartyName> value) {
      validate(fields()[5], value);
      this.names = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'names' field has been set.
      * A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records.
      * @return True if the 'names' field has been set, false otherwise.
      */
    public boolean hasNames() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'names' field.
      * A party can have two names, NameType.COMMON and NameType.LEGAL. It will
        be empty, when there are no active records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearNames() {
      names = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'militaryInfo' field.
      * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
      * @return The value.
      */
    public com.sofi.customers.schemas.MilitaryInfo getMilitaryInfo() {
      return militaryInfo;
    }

    /**
      * Sets the value of the 'militaryInfo' field.
      * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
      * @param value The value of 'militaryInfo'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setMilitaryInfo(com.sofi.customers.schemas.MilitaryInfo value) {
      validate(fields()[6], value);
      this.militaryInfoBuilder = null;
      this.militaryInfo = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'militaryInfo' field has been set.
      * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
      * @return True if the 'militaryInfo' field has been set, false otherwise.
      */
    public boolean hasMilitaryInfo() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'militaryInfo' field and creates one if it doesn't exist yet.
     * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
     * @return This builder.
     */
    public com.sofi.customers.schemas.MilitaryInfo.Builder getMilitaryInfoBuilder() {
      if (militaryInfoBuilder == null) {
        if (hasMilitaryInfo()) {
          setMilitaryInfoBuilder(com.sofi.customers.schemas.MilitaryInfo.newBuilder(militaryInfo));
        } else {
          setMilitaryInfoBuilder(com.sofi.customers.schemas.MilitaryInfo.newBuilder());
        }
      }
      return militaryInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'militaryInfo' field
     * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.sofi.customers.schemas.Party.Builder setMilitaryInfoBuilder(com.sofi.customers.schemas.MilitaryInfo.Builder value) {
      clearMilitaryInfo();
      militaryInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'militaryInfo' field has an active Builder instance
     * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
     * @return True if the 'militaryInfo' field has an active Builder instance
     */
    public boolean hasMilitaryInfoBuilder() {
      return militaryInfoBuilder != null;
    }

    /**
      * Clears the value of the 'militaryInfo' field.
      * A party can only have one active MilitaryInfo. If there is no military info,
        then It will be null.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearMilitaryInfo() {
      militaryInfo = null;
      militaryInfoBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'personInfo' field.
      * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
      * @return The value.
      */
    public com.sofi.customers.schemas.PersonInfo getPersonInfo() {
      return personInfo;
    }

    /**
      * Sets the value of the 'personInfo' field.
      * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
      * @param value The value of 'personInfo'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setPersonInfo(com.sofi.customers.schemas.PersonInfo value) {
      validate(fields()[7], value);
      this.personInfoBuilder = null;
      this.personInfo = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'personInfo' field has been set.
      * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
      * @return True if the 'personInfo' field has been set, false otherwise.
      */
    public boolean hasPersonInfo() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'personInfo' field and creates one if it doesn't exist yet.
     * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
     * @return This builder.
     */
    public com.sofi.customers.schemas.PersonInfo.Builder getPersonInfoBuilder() {
      if (personInfoBuilder == null) {
        if (hasPersonInfo()) {
          setPersonInfoBuilder(com.sofi.customers.schemas.PersonInfo.newBuilder(personInfo));
        } else {
          setPersonInfoBuilder(com.sofi.customers.schemas.PersonInfo.newBuilder());
        }
      }
      return personInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'personInfo' field
     * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.sofi.customers.schemas.Party.Builder setPersonInfoBuilder(com.sofi.customers.schemas.PersonInfo.Builder value) {
      clearPersonInfo();
      personInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'personInfo' field has an active Builder instance
     * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
     * @return True if the 'personInfo' field has an active Builder instance
     */
    public boolean hasPersonInfoBuilder() {
      return personInfoBuilder != null;
    }

    /**
      * Clears the value of the 'personInfo' field.
      * A party can only have one active PersonInfo at a time. If there is no
        person info, then It will be null.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearPersonInfo() {
      personInfo = null;
      personInfoBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'phones' field.
      * A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Phone> getPhones() {
      return phones;
    }

    /**
      * Sets the value of the 'phones' field.
      * A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones.
      * @param value The value of 'phones'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setPhones(java.util.List<com.sofi.customers.schemas.Phone> value) {
      validate(fields()[8], value);
      this.phones = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'phones' field has been set.
      * A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones.
      * @return True if the 'phones' field has been set, false otherwise.
      */
    public boolean hasPhones() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'phones' field.
      * A Party can have multiple Phones, but only one per type. It will be empty
        when there are no phones.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearPhones() {
      phones = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'partyEthnicity' field.
      * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
      * @return The value.
      */
    public com.sofi.customers.schemas.PartyEthnicity getPartyEthnicity() {
      return partyEthnicity;
    }

    /**
      * Sets the value of the 'partyEthnicity' field.
      * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
      * @param value The value of 'partyEthnicity'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setPartyEthnicity(com.sofi.customers.schemas.PartyEthnicity value) {
      validate(fields()[9], value);
      this.partyEthnicityBuilder = null;
      this.partyEthnicity = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'partyEthnicity' field has been set.
      * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
      * @return True if the 'partyEthnicity' field has been set, false otherwise.
      */
    public boolean hasPartyEthnicity() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'partyEthnicity' field and creates one if it doesn't exist yet.
     * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
     * @return This builder.
     */
    public com.sofi.customers.schemas.PartyEthnicity.Builder getPartyEthnicityBuilder() {
      if (partyEthnicityBuilder == null) {
        if (hasPartyEthnicity()) {
          setPartyEthnicityBuilder(com.sofi.customers.schemas.PartyEthnicity.newBuilder(partyEthnicity));
        } else {
          setPartyEthnicityBuilder(com.sofi.customers.schemas.PartyEthnicity.newBuilder());
        }
      }
      return partyEthnicityBuilder;
    }

    /**
     * Sets the Builder instance for the 'partyEthnicity' field
     * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.sofi.customers.schemas.Party.Builder setPartyEthnicityBuilder(com.sofi.customers.schemas.PartyEthnicity.Builder value) {
      clearPartyEthnicity();
      partyEthnicityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'partyEthnicity' field has an active Builder instance
     * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
     * @return True if the 'partyEthnicity' field has an active Builder instance
     */
    public boolean hasPartyEthnicityBuilder() {
      return partyEthnicityBuilder != null;
    }

    /**
      * Clears the value of the 'partyEthnicity' field.
      * A party can only have one active ethnicity. It will be null when there is
        no active ethnicity of the Party.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearPartyEthnicity() {
      partyEthnicity = null;
      partyEthnicityBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'servicingInfos' field.
      * A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.ServicingInfo> getServicingInfos() {
      return servicingInfos;
    }

    /**
      * Sets the value of the 'servicingInfos' field.
      * A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty.
      * @param value The value of 'servicingInfos'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setServicingInfos(java.util.List<com.sofi.customers.schemas.ServicingInfo> value) {
      validate(fields()[10], value);
      this.servicingInfos = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'servicingInfos' field has been set.
      * A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty.
      * @return True if the 'servicingInfos' field has been set, false otherwise.
      */
    public boolean hasServicingInfos() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'servicingInfos' field.
      * A party can only have one active servicingInfos per ServicingType.
        If there is no servicing info, then it will be empty.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearServicingInfos() {
      servicingInfos = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'partyRaces' field.
      * A party can have multiple races. It will be empty on no active records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.PartyRace> getPartyRaces() {
      return partyRaces;
    }

    /**
      * Sets the value of the 'partyRaces' field.
      * A party can have multiple races. It will be empty on no active records.
      * @param value The value of 'partyRaces'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setPartyRaces(java.util.List<com.sofi.customers.schemas.PartyRace> value) {
      validate(fields()[11], value);
      this.partyRaces = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'partyRaces' field has been set.
      * A party can have multiple races. It will be empty on no active records.
      * @return True if the 'partyRaces' field has been set, false otherwise.
      */
    public boolean hasPartyRaces() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'partyRaces' field.
      * A party can have multiple races. It will be empty on no active records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearPartyRaces() {
      partyRaces = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'restrictions' field.
      * A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Restriction> getRestrictions() {
      return restrictions;
    }

    /**
      * Sets the value of the 'restrictions' field.
      * A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records.
      * @param value The value of 'restrictions'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setRestrictions(java.util.List<com.sofi.customers.schemas.Restriction> value) {
      validate(fields()[12], value);
      this.restrictions = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'restrictions' field has been set.
      * A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records.
      * @return True if the 'restrictions' field has been set, false otherwise.
      */
    public boolean hasRestrictions() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'restrictions' field.
      * A party can have many restrictions, but one per RestrictionType. It will
        be empty on no active records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearRestrictions() {
      restrictions = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'educations' field.
      * A party can have multiple educations. It will be empty, if there are no
        active records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Education> getEducations() {
      return educations;
    }

    /**
      * Sets the value of the 'educations' field.
      * A party can have multiple educations. It will be empty, if there are no
        active records.
      * @param value The value of 'educations'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setEducations(java.util.List<com.sofi.customers.schemas.Education> value) {
      validate(fields()[13], value);
      this.educations = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'educations' field has been set.
      * A party can have multiple educations. It will be empty, if there are no
        active records.
      * @return True if the 'educations' field has been set, false otherwise.
      */
    public boolean hasEducations() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'educations' field.
      * A party can have multiple educations. It will be empty, if there are no
        active records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearEducations() {
      educations = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifiers' field.
      * A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Identifier> getIdentifiers() {
      return identifiers;
    }

    /**
      * Sets the value of the 'identifiers' field.
      * A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers.
      * @param value The value of 'identifiers'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setIdentifiers(java.util.List<com.sofi.customers.schemas.Identifier> value) {
      validate(fields()[14], value);
      this.identifiers = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'identifiers' field has been set.
      * A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers.
      * @return True if the 'identifiers' field has been set, false otherwise.
      */
    public boolean hasIdentifiers() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'identifiers' field.
      * A party can have many identifiers but only one active per IdentifierType.
        It will be empty, if there are no identifiers.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearIdentifiers() {
      identifiers = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'consents' field.
      * A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Consent> getConsents() {
      return consents;
    }

    /**
      * Sets the value of the 'consents' field.
      * A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records.
      * @param value The value of 'consents'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setConsents(java.util.List<com.sofi.customers.schemas.Consent> value) {
      validate(fields()[15], value);
      this.consents = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'consents' field has been set.
      * A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records.
      * @return True if the 'consents' field has been set, false otherwise.
      */
    public boolean hasConsents() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'consents' field.
      * A party can have many consents, but only one (active) Consent for each
        agreement_type. It will be empty, if there are no active records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearConsents() {
      consents = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'fraudInfo' field.
      * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
      * @return The value.
      */
    public com.sofi.customers.schemas.FraudInfo getFraudInfo() {
      return fraudInfo;
    }

    /**
      * Sets the value of the 'fraudInfo' field.
      * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
      * @param value The value of 'fraudInfo'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setFraudInfo(com.sofi.customers.schemas.FraudInfo value) {
      validate(fields()[16], value);
      this.fraudInfoBuilder = null;
      this.fraudInfo = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'fraudInfo' field has been set.
      * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
      * @return True if the 'fraudInfo' field has been set, false otherwise.
      */
    public boolean hasFraudInfo() {
      return fieldSetFlags()[16];
    }

    /**
     * Gets the Builder instance for the 'fraudInfo' field and creates one if it doesn't exist yet.
     * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
     * @return This builder.
     */
    public com.sofi.customers.schemas.FraudInfo.Builder getFraudInfoBuilder() {
      if (fraudInfoBuilder == null) {
        if (hasFraudInfo()) {
          setFraudInfoBuilder(com.sofi.customers.schemas.FraudInfo.newBuilder(fraudInfo));
        } else {
          setFraudInfoBuilder(com.sofi.customers.schemas.FraudInfo.newBuilder());
        }
      }
      return fraudInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'fraudInfo' field
     * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.sofi.customers.schemas.Party.Builder setFraudInfoBuilder(com.sofi.customers.schemas.FraudInfo.Builder value) {
      clearFraudInfo();
      fraudInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fraudInfo' field has an active Builder instance
     * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
     * @return True if the 'fraudInfo' field has an active Builder instance
     */
    public boolean hasFraudInfoBuilder() {
      return fraudInfoBuilder != null;
    }

    /**
      * Clears the value of the 'fraudInfo' field.
      * A party can only have one active fraudInfo. If there are no active fraudInfo,
        It will be empty.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearFraudInfo() {
      fraudInfo = null;
      fraudInfoBuilder = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'contactPrefs' field.
      * A party can have many contactPrefs. If there are no active,
        It will be empty.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.ContactPref> getContactPrefs() {
      return contactPrefs;
    }

    /**
      * Sets the value of the 'contactPrefs' field.
      * A party can have many contactPrefs. If there are no active,
        It will be empty.
      * @param value The value of 'contactPrefs'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setContactPrefs(java.util.List<com.sofi.customers.schemas.ContactPref> value) {
      validate(fields()[17], value);
      this.contactPrefs = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'contactPrefs' field has been set.
      * A party can have many contactPrefs. If there are no active,
        It will be empty.
      * @return True if the 'contactPrefs' field has been set, false otherwise.
      */
    public boolean hasContactPrefs() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'contactPrefs' field.
      * A party can have many contactPrefs. If there are no active,
        It will be empty.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearContactPrefs() {
      contactPrefs = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'preferences' field.
      * A party can have many preferences. It will be empty, if there are no
        active preference records.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.Preference> getPreferences() {
      return preferences;
    }

    /**
      * Sets the value of the 'preferences' field.
      * A party can have many preferences. It will be empty, if there are no
        active preference records.
      * @param value The value of 'preferences'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setPreferences(java.util.List<com.sofi.customers.schemas.Preference> value) {
      validate(fields()[18], value);
      this.preferences = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'preferences' field has been set.
      * A party can have many preferences. It will be empty, if there are no
        active preference records.
      * @return True if the 'preferences' field has been set, false otherwise.
      */
    public boolean hasPreferences() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'preferences' field.
      * A party can have many preferences. It will be empty, if there are no
        active preference records.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearPreferences() {
      preferences = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'compensationSources' field.
      * A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources.
      * @return The value.
      */
    public java.util.List<com.sofi.customers.schemas.CompensationSource> getCompensationSources() {
      return compensationSources;
    }

    /**
      * Sets the value of the 'compensationSources' field.
      * A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources.
      * @param value The value of 'compensationSources'.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder setCompensationSources(java.util.List<com.sofi.customers.schemas.CompensationSource> value) {
      validate(fields()[19], value);
      this.compensationSources = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'compensationSources' field has been set.
      * A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources.
      * @return True if the 'compensationSources' field has been set, false otherwise.
      */
    public boolean hasCompensationSources() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'compensationSources' field.
      * A party can have multiple CompensationSources, including of the same type.
        It will be empty, if there are no active compensation sources.
      * @return This builder.
      */
    public com.sofi.customers.schemas.Party.Builder clearCompensationSources() {
      compensationSources = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Party build() {
      try {
        Party record = new Party();
        record.partyId = fieldSetFlags()[0] ? this.partyId : (java.lang.Long) defaultValue(fields()[0]);
        record.partyType = fieldSetFlags()[1] ? this.partyType : (java.lang.String) defaultValue(fields()[1]);
        record.active = fieldSetFlags()[2] ? this.active : (java.lang.Boolean) defaultValue(fields()[2]);
        record.addresses = fieldSetFlags()[3] ? this.addresses : (java.util.List<com.sofi.customers.schemas.Address>) defaultValue(fields()[3]);
        record.emails = fieldSetFlags()[4] ? this.emails : (java.util.List<com.sofi.customers.schemas.Email>) defaultValue(fields()[4]);
        record.names = fieldSetFlags()[5] ? this.names : (java.util.List<com.sofi.customers.schemas.PartyName>) defaultValue(fields()[5]);
        if (militaryInfoBuilder != null) {
          record.militaryInfo = this.militaryInfoBuilder.build();
        } else {
          record.militaryInfo = fieldSetFlags()[6] ? this.militaryInfo : (com.sofi.customers.schemas.MilitaryInfo) defaultValue(fields()[6]);
        }
        if (personInfoBuilder != null) {
          record.personInfo = this.personInfoBuilder.build();
        } else {
          record.personInfo = fieldSetFlags()[7] ? this.personInfo : (com.sofi.customers.schemas.PersonInfo) defaultValue(fields()[7]);
        }
        record.phones = fieldSetFlags()[8] ? this.phones : (java.util.List<com.sofi.customers.schemas.Phone>) defaultValue(fields()[8]);
        if (partyEthnicityBuilder != null) {
          record.partyEthnicity = this.partyEthnicityBuilder.build();
        } else {
          record.partyEthnicity = fieldSetFlags()[9] ? this.partyEthnicity : (com.sofi.customers.schemas.PartyEthnicity) defaultValue(fields()[9]);
        }
        record.servicingInfos = fieldSetFlags()[10] ? this.servicingInfos : (java.util.List<com.sofi.customers.schemas.ServicingInfo>) defaultValue(fields()[10]);
        record.partyRaces = fieldSetFlags()[11] ? this.partyRaces : (java.util.List<com.sofi.customers.schemas.PartyRace>) defaultValue(fields()[11]);
        record.restrictions = fieldSetFlags()[12] ? this.restrictions : (java.util.List<com.sofi.customers.schemas.Restriction>) defaultValue(fields()[12]);
        record.educations = fieldSetFlags()[13] ? this.educations : (java.util.List<com.sofi.customers.schemas.Education>) defaultValue(fields()[13]);
        record.identifiers = fieldSetFlags()[14] ? this.identifiers : (java.util.List<com.sofi.customers.schemas.Identifier>) defaultValue(fields()[14]);
        record.consents = fieldSetFlags()[15] ? this.consents : (java.util.List<com.sofi.customers.schemas.Consent>) defaultValue(fields()[15]);
        if (fraudInfoBuilder != null) {
          record.fraudInfo = this.fraudInfoBuilder.build();
        } else {
          record.fraudInfo = fieldSetFlags()[16] ? this.fraudInfo : (com.sofi.customers.schemas.FraudInfo) defaultValue(fields()[16]);
        }
        record.contactPrefs = fieldSetFlags()[17] ? this.contactPrefs : (java.util.List<com.sofi.customers.schemas.ContactPref>) defaultValue(fields()[17]);
        record.preferences = fieldSetFlags()[18] ? this.preferences : (java.util.List<com.sofi.customers.schemas.Preference>) defaultValue(fields()[18]);
        record.compensationSources = fieldSetFlags()[19] ? this.compensationSources : (java.util.List<com.sofi.customers.schemas.CompensationSource>) defaultValue(fields()[19]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Party>
    WRITER$ = (org.apache.avro.io.DatumWriter<Party>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Party>
    READER$ = (org.apache.avro.io.DatumReader<Party>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
