/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.orthus.gdax.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A trade occured */
@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -483293117328206630L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"com.orthus.gdax.schemas\",\"doc\":\"A trade occured\",\"fields\":[{\"name\":\"price\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigDecimal\"},\"doc\":\"Price of product at trade.\\n         * U.S. Dollar / product cost\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Time trade occured\"},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product identifer\"}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Trade> ENCODER =
      new BinaryMessageEncoder<Trade>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trade> DECODER =
      new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Trade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Trade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Trade to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Trade from a ByteBuffer. */
  public static Trade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Price of product at trade.
         * U.S. Dollar / product cost */
   private java.math.BigDecimal price;
  /** Time trade occured */
   private org.joda.time.DateTime timestamp;
  /** Product identifer */
   private java.lang.String productId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trade() {}

  /**
   * All-args constructor.
   * @param price Price of product at trade.
         * U.S. Dollar / product cost
   * @param timestamp Time trade occured
   * @param productId Product identifer
   */
  public Trade(java.math.BigDecimal price, org.joda.time.DateTime timestamp, java.lang.String productId) {
    this.price = price;
    this.timestamp = timestamp;
    this.productId = productId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return price;
    case 1: return timestamp;
    case 2: return productId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      TIMESTAMP_CONVERSION,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: price = (java.math.BigDecimal)value$; break;
    case 1: timestamp = (org.joda.time.DateTime)value$; break;
    case 2: productId = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'price' field.
   * @return Price of product at trade.
         * U.S. Dollar / product cost
   */
  public java.math.BigDecimal getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * Price of product at trade.
         * U.S. Dollar / product cost
   * @param value the value to set.
   */
  public void setPrice(java.math.BigDecimal value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Time trade occured
   */
  public org.joda.time.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Time trade occured
   * @param value the value to set.
   */
  public void setTimestamp(org.joda.time.DateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return Product identifer
   */
  public java.lang.String getProductId() {
    return productId;
  }

  /**
   * Sets the value of the 'productId' field.
   * Product identifer
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.productId = value;
  }

  /**
   * Creates a new Trade RecordBuilder.
   * @return A new Trade RecordBuilder
   */
  public static com.orthus.gdax.schemas.Trade.Builder newBuilder() {
    return new com.orthus.gdax.schemas.Trade.Builder();
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.orthus.gdax.schemas.Trade.Builder newBuilder(com.orthus.gdax.schemas.Trade.Builder other) {
    return new com.orthus.gdax.schemas.Trade.Builder(other);
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Trade instance.
   * @param other The existing instance to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.orthus.gdax.schemas.Trade.Builder newBuilder(com.orthus.gdax.schemas.Trade other) {
    return new com.orthus.gdax.schemas.Trade.Builder(other);
  }

  /**
   * RecordBuilder for Trade instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    /** Price of product at trade.
         * U.S. Dollar / product cost */
    private java.math.BigDecimal price;
    /** Time trade occured */
    private org.joda.time.DateTime timestamp;
    /** Product identifer */
    private java.lang.String productId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.orthus.gdax.schemas.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Trade instance
     * @param other The existing instance to copy.
     */
    private Builder(com.orthus.gdax.schemas.Trade other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'price' field.
      * Price of product at trade.
         * U.S. Dollar / product cost
      * @return The value.
      */
    public java.math.BigDecimal getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * Price of product at trade.
         * U.S. Dollar / product cost
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.orthus.gdax.schemas.Trade.Builder setPrice(java.math.BigDecimal value) {
      validate(fields()[0], value);
      this.price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * Price of product at trade.
         * U.S. Dollar / product cost
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'price' field.
      * Price of product at trade.
         * U.S. Dollar / product cost
      * @return This builder.
      */
    public com.orthus.gdax.schemas.Trade.Builder clearPrice() {
      price = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Time trade occured
      * @return The value.
      */
    public org.joda.time.DateTime getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Time trade occured
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.orthus.gdax.schemas.Trade.Builder setTimestamp(org.joda.time.DateTime value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Time trade occured
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Time trade occured
      * @return This builder.
      */
    public com.orthus.gdax.schemas.Trade.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * Product identifer
      * @return The value.
      */
    public java.lang.String getProductId() {
      return productId;
    }

    /**
      * Sets the value of the 'productId' field.
      * Product identifer
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.orthus.gdax.schemas.Trade.Builder setProductId(java.lang.String value) {
      validate(fields()[2], value);
      this.productId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * Product identifer
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productId' field.
      * Product identifer
      * @return This builder.
      */
    public com.orthus.gdax.schemas.Trade.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trade build() {
      try {
        Trade record = new Trade();
        record.price = fieldSetFlags()[0] ? this.price : (java.math.BigDecimal) defaultValue(fields()[0], record.getConversion(0));
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (org.joda.time.DateTime) defaultValue(fields()[1], record.getConversion(1));
        record.productId = fieldSetFlags()[2] ? this.productId : (java.lang.String) defaultValue(fields()[2], record.getConversion(2));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trade>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trade>
    READER$ = (org.apache.avro.io.DatumReader<Trade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
